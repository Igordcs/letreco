import React, {useEffect, useState} from 'react'
import Head from 'next/head'
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import styles from '../styles/Home.module.css'
import styleWord from '../styles/wordWrapper.module.css'
import stylesKeyBoard from '../styles/keyboard.module.css'

import { WordWrapper } from '../components/wordWrapper'
import { Keyboard } from '../components/keyboard'
import {WORDLIST} from '../words';
import {VALIDGUESSES} from '../validGuesses';

export default function Home() {
  const [words, setWords] = useState(["", "", "", "", "", ""]);
  const [currentGuess, setCurrentGuess] = useState("");
  const [currentStage, setCurrentStage] = useState(0);
  const validKeys = "qwertyuiopasdfghjklzxcvbnm"

  const chances = 6
  const caracteres = 5

  const resetGame = () => {
    words.map((word) => {
      const wordSplit = word.split("")

      wordSplit.map((char, index) => {
        const letterDiv = document.querySelectorAll('#'+word+char+index)
        const keyBoardButton = document.querySelector('#keyBoard'+char.toUpperCase())

        keyBoardButton.classList.value = `${stylesKeyBoard.keyBoardButton}`

        letterDiv.forEach(element => {
          element.classList.value = `${styleWord.letterWrapper}`
        })
      })
    })

    setWords(["", "", "", "", "", ""])
    setCurrentStage(0)
    getRandomWord()
  }

  const onDelete = () => {
    const newArray = [...words]
    newArray[currentStage] = ""
    setWords(newArray)
  } 
  
  const onConfirm = () => { 
    const currentWord = words[currentStage]
    if(!VALIDGUESSES.includes(currentWord))
      return toast.error("A palavra não existe no banco de dados")

    if (currentWord.length < 5)
      return toast.warn("A palavra deve conter 5 letras.")

    const currentWordsplit = currentWord.split("")

    currentWordsplit.map((char, index) => {
      const isInWord = currentGuess.includes(char);
      const isInSamePos = isInWord && currentGuess[index] == char;

      if (!isInWord){
        const keyBoardButton = document.querySelector("#keyBoard"+char.toUpperCase())
        keyBoardButton.classList.add(`${styles.keyBoardNull}`)
      }

      if (isInWord && !isInSamePos)
      {
        const letterDiv = document.querySelectorAll('#'+currentWord+char+index)
        console.log(letterDiv)
        letterDiv.forEach((element) => {
          element.classList.add(`${styleWord.displaced}`)
        })
      }
        
      if (isInWord && isInSamePos)
      {
        const letterDiv = document.querySelectorAll('#'+currentWord+char+index)
        letterDiv.forEach((element) => {
          element.classList.add(`${styleWord.right}`)
        })
      }

    })

    if (currentWord == currentGuess) {
      toast.success('Aeeee, você acertou!')
      return resetGame();
    }

    

    setCurrentStage(currentStage + 1)
  }

  const handleKeyPress = (e) => {
    const char = e.key.toLowerCase()
    const isKeyVerify = validKeys.includes(char)

      if (e.key == 'Backspace')
        return onDelete()

      if (e.key == 'Enter')
        return onConfirm()

      if (!isKeyVerify)
        return

      if (words[currentStage].length == 5)
        return;

      const newArray = [...words]
      newArray[currentStage] = newArray[currentStage] + char
      setWords(newArray)
  }

  const getRandomWord = () => {
    const random = Math.floor(Math.random() * WORDLIST.length)
    setCurrentGuess(WORDLIST[random].normalize("NFD"))
  }

  useEffect(() => {
    if(currentStage + 1 > chances)
      return resetGame();
  }, [currentStage])

  useEffect(() => {
    getRandomWord()
  }, [])

  useEffect(() => {
    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [words[currentStage]])

  console.log(currentGuess)

  return (
    <div className={styles.container}>
      <Head>
        <title>Letreco</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>LETRECO DA GAMBIARRA</h1>

        {[...Array(chances)].map((x, i) =>
          <WordWrapper key={i} word={words[i]} length={caracteres} />
        )}
        
        <Keyboard handleKeyPress={handleKeyPress}/>

      </main>

      <ToastContainer
        position="top-right"
        autoClose={1400}
        hideProgressBar={true}
        newestOnTop={true}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
    </div>
  )
}
